#!/bin/bash

declare -g rip_name="training_video"

intro() {

    echo "
                   __                                               .___         ._.
   ____    ____  _/  |_          _______   ____   __ __   ____    __| _/  ______ | |
  / ___\ _/ __ \ \   __\         \_  __ \ /  _ \ |  |  \ /    \  / __ |  /  ___/ | |
 / /_/  >\  ___/  |  |            |  | \/(  <_> )|  |  /|   |  \/ /_/ |  \___ \   \|
 \___  /  \___  > |__|    ______  |__|    \____/ |____/ |___|  /\____ | /____  >  __
/_____/       \/         /_____/                             \/      \/      \/   \/"

}

get_training_video() {

    while true; do

        read -p "Do you want to download a training video? (y/n): " rip_video
        if [ "$rip_video" == "y" ]; then
            read -p "Choose a name for the video (default: training_video): " rip_name
            if [ -z "$rip_name" ]; then
                rip_name="training_video"
            fi
            read -p "1) 1080 or 2) 720: " video_quality
            if [ "$video_quality" == "1" ]; then
                video_quality='bv*[height=1080]+ba'
            else
                video_quality='bv*[height=720]+ba'
            fi
            read -p "Enter the video URL: " video_url
            yt-dlp -S ext:mp4:m4a -f "${video_quality}" -o "${rip_name}.mp4" "${video_url}"
        else
            break
        fi
    done
}

split_video() {

    read -p "Enter the MAP name: " map_name
    map_name=${map_name^^}
    clip_size=180

    read -p "Enter the number of clips you want: " num_clips

    if [ "$num_clips" == "1" ]; then
        read -p "Custom length? (y/n): " c_length

        if [ "$c_length" == "y" ]; then
            read -p "Enter the clip length in seconds (default: 180): " clip_size
        fi
    fi

    # Declare arrays to store start time and output file name
    start_hour_arr=()
    start_minute_arr=()
    start_second_arr=()
    output_file_arr=()

    # Loop through to get all the user inputs
    for ((i = 1; i <= $num_clips; i++)); do
        read -p "Enter the start hour for clip $i (00-23): " start_hour
        read -p "Enter the start minute for clip $i (00-59): " start_minute
        read -p "Enter the start second for clip $i (00-59): " start_second

        start_hour_arr+=("$start_hour")
        start_minute_arr+=("$start_minute")
        start_second_arr+=("$start_second")

        output_file="${map_name}${start_hour}H${start_minute}M${start_second}S.mp4"
        output_file_arr+=("$output_file")
    done

    # Loop through arrays to process FFmpeg requests
    for ((i = 0; i < $num_clips; i++)); do
        start_time="${start_hour_arr[$i]}:${start_minute_arr[$i]}:${start_second_arr[$i]}"
        ffmpeg -loglevel error -i ${rip_name}.mp4 -ss "$start_time" -t "${clip_size:-0}" -c copy "${output_file_arr[$i]}"
        echo "New clip: ${output_file_arr[$i]}!"
    done
}


clear
intro

echo ""

options=("Download new training video" "Clip video")

# Display menu and prompt for input
select opt in "${options[@]}"; do
    case $opt in
    "Download new training video")
        get_training_video
        echo ""
        split_video
        break
        ;;
    "Clip video")
        split_video
        break
        ;;
    *)
        echo "Invalid option. Please choose again."
        ;;
    esac
done
